####################################################################################################################
# The Sheet (Correios price list) used to import to this program is generated by https://planilha.xpagencia.com.br #
# Create a file config.py and inside set the variables:                                                            #
# x_vtex_api_appkey = "Your appkey here"                                                                           #
# x_vtex_api_apptoken = "Your apptoken here"                                                                       #
# You can create an .exe for this program. Just do "pyinstaller --onefile adjust_table.py"                         #
# You can use "black adjust_table.py" to automatically adjustt the code                                            #
####################################################################################################################
from audioop import mul
import config

from textwrap import indent
from tracemalloc import stop
import pandas as pd
import numpy as np
from pandas import DataFrame
import json

from tkinter import Tk, messagebox  # from tkinter import Tk for Python 3.x
from tkinter.filedialog import askopenfilename
from tkinter import filedialog, Tk
from tkinter import simpledialog

import requests

default_prices_final_weight_range = 3000
custom_prices_start_weight_range = default_prices_final_weight_range
custom_prices_final_weight_range = 15000
max_prices_start_weight_range = custom_prices_final_weight_range
max_prices_final_weight_range = 30000
filename = ""

adjust = messagebox.askquestion(
    "Bem vindo",
    "Este programa envia a tabela de frete dos correios gerado pelo site https://planilha.xpagencia.com.br para a plataforma VTEX.\nDeseja adaptar os valores da tabela gerada?",
)

if adjust == "yes":
    change_ranges = messagebox.askquestion(
        "Bem Vindo",
        "Neste programa temos 3 faixas de peso a ser considerado.\nA primeira faixa mantém o valor padrão que veio da fonte.\nA segunda faixa aplica um cálculo para adequação dos valores para a realidade da empresa (vide ReadMe).\nA terceira faixa aplica o valor do último peso desta faixa para todos os pesos desta faixa.\n\nPor padrão temos: \n\nDe 0g até "
        + str(default_prices_final_weight_range)
        + "g = valor conforme a tabela dos correios; \n\nDe "
        + str(custom_prices_start_weight_range)
        + "g até "
        + str(custom_prices_final_weight_range)
        + "g = valor ajustado onde se multiplica a faixa de peso pela valor informada pelo usuário, em seguida aplicando o novo valor de acordo com o peso calculado; \n\nDe "
        + str(max_prices_start_weight_range)
        + "g até "
        + str(max_prices_final_weight_range)
        + "g = valor padrão do último peso desta faixa para todos os pesos desta faixa ("
        + str(max_prices_final_weight_range)
        + "g). \n\nDeseja alterar as faixas de peso? ",
    )

    while change_ranges == "yes":
        default_prices_final_weight_range = simpledialog.askinteger(
            "Faixa 1 final",
            "Qual a faixa de peso final para aplicar preço da tabela padrão? (Atual:"
            + str(default_prices_final_weight_range)
            + "g) ",
            minvalue=0,
            maxvalue=999999,
        )
        custom_prices_start_weight_range = default_prices_final_weight_range
        custom_prices_final_weight_range = simpledialog.askinteger(
            "Faixa 2 final",
            "Qual a faixa de peso final para aplicar o calculo de preço personalizado? (Atual:"
            + str(custom_prices_final_weight_range)
            + "g) ",
            minvalue=0,
            maxvalue=999999,
        )

        max_prices_start_weight_range = custom_prices_final_weight_range

        max_prices_final_weight_range = simpledialog.askinteger(
            "Faixa 3 final",
            "Qual a faixa de peso final para aplicar o preço máximo? (Atual:"
            + str(max_prices_final_weight_range)
            + "g) ",
            minvalue=0,
            maxvalue=999999,
        )

        change_ranges = messagebox.askquestion(
            "Faixas alteradas",
            "Confira abaixo se as faixas de peso estão corretamente parametrizadas:\n\nDe 0g até "
            + str(default_prices_final_weight_range)
            + "g = valor conforme a tabela dos correios; \n\nDe "
            + str(custom_prices_start_weight_range)
            + "g até "
            + str(custom_prices_final_weight_range)
            + "g = valor ajustado onde se multiplica a faixa de peso pela valor informada pelo usuário, em seguida aplicando o novo valor de acordo com o peso calculado; \n\nDe "
            + str(max_prices_start_weight_range)
            + "g até "
            + str(max_prices_final_weight_range)
            + "g = valor padrão do último peso desta faixa para todos os pesos desta faixa ("
            + str(max_prices_final_weight_range)
            + "g). \n\nDeseja alterar as faixas de peso? ",
        )

    # multiplier = float(input('Insira o multiplicador para correção das faixas de peso: ').replace(',','.'))
    multiplier = simpledialog.askfloat(
        "Atenção",
        "Insira o valor (multiplicador) para adaptação do custo das faixas de peso.\n\nSendo 1.75 o padrão Dal Costa e 1 para enviar a tabela exatamente da forma\nque foi extraída pelo site da XP Agência, ou seja, sem nenhuma alteração: \n",
        minvalue=0,
        maxvalue=999999,
    )
    if multiplier == None:
        messagebox.showinfo("Cancelado", "Operação cancelada pelo usuário")
        exit()

while filename == "":
    upload_file = messagebox.askquestion(
        title="Atenção",
        message="Localize o arquivo excel dos correios para ajuste da tabela. Você deseja continuar?",
    )
    if upload_file == "yes":
        Tk().withdraw()  # we don't want a full GUI, so keep the root window from appearing
        filename = (
            askopenfilename()
        )  # show an "Open" dialog box and return the path to the selected file
    elif upload_file == "no":
        messagebox.showinfo("Cancelado", "Operação cancelada pelo usuário")
        exit()

# importação do arquivo xls do fábio que na verdade é um html
# df = df.rename(columns=df.iloc[0]).drop(df.index[0]) > outra forma de tirar o index como header (a forma usada foi header = 0)
df = pd.read_html(
    filename,
    header=0,
    decimal=",",
    thousands=".",
    converters={"ZipCodeStart": str, "ZipCodeEnd": str},
)[0]
# apagar todas as linhas vazias
df = df.dropna(how="all")
# df['WeightStart'] = df['WeightStart'].to_string() > outra forma de converter os dados da coluna para string

if multiplier != 1:
    df["ZipCodeEnd-WeightEnd"] = (
        df["ZipCodeEnd"] + "-" + df["WeightEnd"].astype(int).astype(str)
    )

    df.loc[(df["WeightEnd"] < default_prices_final_weight_range), "ZipWeight"] = (
        df["ZipCodeEnd"] + "-" + df["WeightEnd"].astype(int).astype(str)
    )
    df.loc[
        (df["WeightEnd"] >= custom_prices_start_weight_range)
        & (df["WeightEnd"] <= custom_prices_final_weight_range),
        "ZipWeight",
    ] = (
        df["ZipCodeEnd"]
        + "-"
        + (((df["WeightEnd"] * multiplier) / 1000).astype(int) * 1000).astype(str)
    )
    df.loc[(df["WeightEnd"] > max_prices_start_weight_range), "ZipWeight"] = (
        df["ZipCodeEnd"] + "-" + "30000"
    )

    # basicamente um procv do pandas
    df["AbsoluteMoneyCost2"] = df.ZipWeight.map(
        df.set_index("ZipCodeEnd-WeightEnd")["AbsoluteMoneyCost"]
    )

    df.drop(
        columns=[
            "AbsoluteMoneyCost",
            "ZipCodeEnd-WeightEnd",
            "ZipWeight",
            "MinimumValueInsurance",
        ],
        axis=1,
        inplace=True,
    )

    df.rename(
        columns={
            "AbsoluteMoneyCost2": "absoluteMoneyCost",
        },
        inplace=True,
    )
else:
    df.rename(
        columns={"AbsoluteMoneyCost": "absoluteMoneyCost"},
        inplace=True,
    )

df.rename(
    columns={
        "ZipCodeStart": "zipCodeStart",
        "ZipCodeEnd": "zipCodeEnd",
        "PolygonName": "polygon",
        "WeightStart": "weightStart",
        "WeightEnd": "weightEnd",
        "PricePercent": "pricePercent",
        "PriceByExtraWeight": "pricePercentByWeight",
        "MaxVolume": "maxVolume",
        "TimeCost": "timeCost",
        "Country": "country",
    },
    inplace=True,
)

df["polygon"] = ""

df["operationType"] = 1

df[
    ["pricePercent", "pricePercentByWeight", "weightStart", "weightEnd", "maxVolume"]
] = df[
    ["pricePercent", "pricePercentByWeight", "weightStart", "weightEnd", "maxVolume"]
].astype(
    int
)

df["timeCost"] = df["timeCost"].astype(int).astype(str) + ".00:00:00"

# as linhas abaixo limpam os dados e ordenan para os dados ficarem exatamente no padrão da plataforma VTEX
df = df[
    [
        "zipCodeStart",
        "zipCodeEnd",
        "polygon",
        "weightStart",
        "weightEnd",
        "absoluteMoneyCost",
        "pricePercent",
        "pricePercentByWeight",
        "maxVolume",
        "timeCost",
        "country",
        "operationType",
    ]
]
df = df.dropna()
# print(df["weightEnd"].hasnans)
# print(df)
# print(df.dtypes)
# print(json.loads(df.to_json(orient="records")))

# root = tk.Tk() # Create an instance of tkinter

answer_sp_id = simpledialog.askstring(
    title="TITULO",
    prompt="Insira o código ID da política de envio (Shipping Police ID)",
)

if answer_sp_id is None:
    messagebox.showinfo("Cancelado", "Operação cancelada pelo usuário")
    exit()

# Integration start
# -------------------------------------------------------------------------------------------------------------------------
# Start getting shipping policy
url_policy = (
    "https://dalcosta.vtexcommercestable.com.br/api/logistics/pvt/shipping-policies/"
    + answer_sp_id
)
# 1e7a0e3

headers_policy = {
    "Accept": "application/json",
    "Content-Type": "application/json",
    "X-VTEX-API-AppKey": config.x_vtex_api_appkey,
    "X-VTEX-API-AppToken": config.x_vtex_api_apptoken,
}

response_get = requests.get(url_policy, headers=headers_policy)
if response_get.status_code != 200:
    messagebox.showinfo(
        "Cancelado", "ID incorreto ou problema na integração. Operação cancelada"
    )
    exit()
json_response = response_get.json()

# Start Deleting shipping policy
response_delete = requests.delete(url_policy, headers=headers_policy)

# Start Creating Shipping policy
url_create = (
    "https://dalcosta.vtexcommercestable.com.br/api/logistics/pvt/shipping-policies"
)

headers_create_policy = {
    "Accept": "application/json",
    "Content-Type": "application/json",
    "X-VTEX-API-AppKey": config.x_vtex_api_appkey,
    "X-VTEX-API-AppToken": config.x_vtex_api_apptoken,
}

response_create = requests.post(
    url_create, json=json_response, headers=headers_create_policy
)
# print(response_create.text)

# Start creating/update freight values
url_post = (
    "https://dalcosta.vtexcommercestable.com.br/api/logistics/pvt/configuration/freights/"
    + answer_sp_id
    + "/values/update"
)

payload = df.to_json(orient="records")
headers = {
    "Content-Type": "application/json; charset=utf-8",
    "Accept": "application/json",
    "X-VTEX-API-AppKey": config.x_vtex_api_appkey,
    "X-VTEX-API-AppToken": config.x_vtex_api_apptoken,
}
response = requests.post(url_post, data=payload, headers=headers)
print(response.status_code)
# print(response.text)
# print(payload)

# df.to_excel('exportado.xlsx', index = False)
# messagebox.showinfo("Atenção", "Selecione o destino do novo documento!")
# try:
#     with filedialog.asksaveasfile(defaultextension=".xls") as file:
#         df.to_excel(file.name, index=False, engine='xlwt')
# except AttributeError:
#     # if user cancels save, filedialog returns None rather than a file object, and the 'with' will raise an error
#     messagebox.showinfo("Operação cancelada", "Operação cancelada pelo usuário")

# messagebox.showinfo("Concluído", "Novo arquivo salvo em: " + str(file.name))

# TIPS

# print(df.columns) > Saber nome de todas as colunas
# print(df.dtypes) > lista o tipo de cada coluna do dataframe
# types = pd.DataFrame(df) > saber quais os tipos de dado que está nas colunas da planilha

# Create an executable for the program
# pip install pyinstaller
# pyinstaller --onefile nome.py

# Install black for make automate adjustments on the code
# pip install black
# Execute adjustments on the code
# black adjust_table.py

# Don't remember the tip above
# pip install xlwt para XLS
